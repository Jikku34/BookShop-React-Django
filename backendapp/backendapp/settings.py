"""
Django settings for backendapp project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--fdgok56rxu0(d_qf+u0_yn-)-6oj)i@6%n7z@foml+so$6z!%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

"""
Django application for handling Cross-Origin Resource Sharing (CORS) headers.

CORS (Cross-Origin Resource Sharing) is a mechanism that allows web browsers to request resources from a different origin (domain) than the one from which the current page was served. CORS headers are used to control access to resources on a web server from web pages served by other domains.

The 'corsheaders' Django application provides middleware and settings for adding CORS headers to HTTP responses in your Django project. By configuring CORS headers, you can control which origins are allowed to access your API, which HTTP methods are allowed, which headers are allowed in requests, and more.

Attributes:
    Middleware: The 'CorsMiddleware' class provided by 'corsheaders.middleware' is added to the MIDDLEWARE list in settings.py. This middleware adds CORS headers to every HTTP response.

By adding 'corsheaders' to your Django project and configuring CORS settings, you can enable Cross-Origin Resource Sharing for your API endpoints, allowing web browsers to make requests to your API from web pages served by different origins.
"""

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "DemoApp",
    'rest_framework',
    'corsheaders'  # Enable Django REST Framework
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True
"""
Setting CORS_ALLOW_ALL_ORIGINS = True in Django's CORS headers configuration allows requests from any origin (i.e., any domain) to access your Django application's resources.
This effectively disables the same-origin policy enforced by web browsers and opens up your application to potential security risks, as it allows any website to make requests to your API.
"""

ROOT_URLCONF = 'backendapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backendapp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'